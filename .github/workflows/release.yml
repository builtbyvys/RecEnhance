name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version
        id: get_version
        run: echo ::set-output name=version::${GITHUB_REF#refs/tags/v}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build_android:
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Decode Keystore
        env:
          ENCODED_KEYSTORE: ${{ secrets.YOUR_KEYSTORE_BASE64 }}
        run: |
          echo $ENCODED_KEYSTORE | base64 --decode > android/keystore.jks

      - name: Build Release APK
        env:
          KEY_ALIAS: ${{ secrets.YOUR_KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.YOUR_KEY_PASSWORD }}
          KEYSTORE_PASSWORD: ${{ secrets.YOUR_KEYSTORE_PASSWORD }}
        run: ./gradlew :android:assembleRelease

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./android/build/outputs/apk/release/app-release.apk
          asset_name: app-${{ needs.create_release.outputs.version }}.apk
          asset_content_type: application/vnd.android.package-archive

  build_ios:
    needs: create_release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Install gpg
        run: brew install gnupg

      - name: Setup provisioning profile
        env:
          IOS_KEYS: ${{ secrets.IOS_KEYS }}
        run: |
          chmod +x .github/secrets/decrypt_secrets.sh
          ./.github/secrets/decrypt_secrets.sh
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp .github/secrets/ProjectName_Ad_Hoc.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Build IPA
        env:
          DEVELOPER_APP_ID: ${{ secrets.DEVELOPER_APP_ID }}
          DEVELOPER_APP_IDENTIFIER: ${{ secrets.DEVELOPER_APP_IDENTIFIER }}
          PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}
          TEMP_KEYCHAIN_PASSWORD: ${{ secrets.TEMP_KEYCHAIN_PASSWORD }}
          TEMP_KEYCHAIN_USER: ${{ secrets.TEMP_KEYCHAIN_USER }}
        run: |
          fastlane gym --export_method ad-hoc --output_directory build --output_name ios.ipa

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./build/ios.ipa
          asset_name: ios-${{ needs.create_release.outputs.version }}.ipa
          asset_content_type: application/octet-stream

  build_windows:
    needs: create_release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: Build
        run: dotnet publish windowsApp/WindowsApp.csproj -c Release -r win-x64 --self-contained -p:PublishSingleFile=true -o publish

      - name: Create ZIP archive
        run: Compress-Archive publish/* WindowsApp.zip

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./Windows.zip
          asset_name: Windows-${{ needs.create_release.outputs.version }}.zip
          asset_content_type: application/zip

  build_linux:
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: Build
        run: dotnet publish linux/LinuxApp.csproj -c Release -r linux-x64 --self-contained -p:PublishSingleFile=true -o publish

      - name: Create tarball
        run: tar -czvf Linux.tar.gz -C publish .

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./Linux.tar.gz
          asset_name: Linux-${{ needs.create_release.outputs.version }}.tar.gz
          asset_content_type: application/gzip